{"version":3,"sources":["api.ts","components/TodoList/TodoList.tsx","enums/SelectStatus.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/getFilteredTodos.ts","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SelectStatus","TodoList","memo","props","todos","todoId","onSelectTodo","className","map","todo","id","completed","classNames","title","type","onClick","prevProps","currProps","prevTodos","prevTodoId","currTodos","length","i","prevTodo","currTodo","Object","keys","key","arePropsEqual","TodoFilter","status","query","onStatusChange","onQueryChange","value","onChange","event","target","changeFilterOption","All","Active","Completed","placeholder","style","pointerEvents","Loader","TodoModal","onModalClose","useState","user","setUser","useEffect","userId","data","catch","err","Error","href","email","name","App","setTodos","todosStatus","setTodosStatus","setQuery","selectedTodo","setSelectedTodo","filteredTodos","useMemo","option","filter","lowerQuery","toLocaleLowerCase","toLowerCase","includes","getFilteredTodos","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d102aa3.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC, memo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  todoId: number | null;\n  onSelectTodo: (todo: Todo) => void;\n};\n\nexport function arePropsEqual(prevProps: Props, currProps: Props): boolean {\n  const {\n    todos: prevTodos,\n    todoId: prevTodoId,\n  } = prevProps;\n\n  const {\n    todos: currTodos,\n    todoId: currTodoId,\n  } = currProps;\n\n  if (currTodoId !== prevTodoId) {\n    return false;\n  }\n\n  if (prevTodos.length !== currTodos.length) {\n    return false;\n  }\n\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < prevTodos.length; i++) {\n    const prevTodo = prevTodos[i];\n    const currTodo = currTodos[i];\n\n    const todoKeys = Object.keys(prevTodo);\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of todoKeys) {\n      if (prevTodo[key] !== currTodo[key]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nexport const TodoList: FC<Props> = memo((props) => {\n  const {\n    todos,\n    todoId,\n    onSelectTodo,\n  } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => (\n          <tr key={todo.id} data-cy=\"todo\">\n            <td className=\"is-vcentered\">{todo.id}</td>\n\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n              >\n                {todo.title}\n              </p>\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => onSelectTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': todo.id !== todoId,\n                    'fa-eye-slash': todo.id === todoId,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}, (prevProps, currProps) => {\n  return arePropsEqual(prevProps, currProps);\n});\n","export enum SelectStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { FC, ChangeEvent, memo } from 'react';\nimport { SelectStatus } from '../../enums/SelectStatus';\n\ntype Props = {\n  status: SelectStatus;\n  query: string;\n  onStatusChange: (filter: SelectStatus) => void;\n  onQueryChange: (newQuery: string) => void;\n};\n\nexport const TodoFilter: FC<Props> = memo((props) => {\n  const {\n    status,\n    query,\n    onStatusChange,\n    onQueryChange,\n  } = props;\n\n  const changeFilterOption = (event: ChangeEvent<HTMLSelectElement>) => {\n    onStatusChange(event.target.value as SelectStatus);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => changeFilterOption(event)}\n          >\n            <option value={SelectStatus.All}>All</option>\n            <option value={SelectStatus.Active}>Active</option>\n            <option value={SelectStatus.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => onQueryChange(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n          // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  todo: Todo;\n  onModalClose: () => void;\n};\n\nexport const TodoModal: FC<Props> = (props) => {\n  const {\n    todo,\n    onModalClose,\n  } = props;\n\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId)\n      .then(data => setUser(data))\n      .catch(err => {\n        throw new Error(err);\n      });\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  FC, useEffect, useState, useMemo, useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { SelectStatus } from './enums/SelectStatus';\nimport { getFilteredTodos } from './utils/getFilteredTodos';\nimport './App.scss';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todosStatus, setTodosStatus] = useState<SelectStatus>(SelectStatus.All);\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos()\n      .then(data => setTodos(data))\n      .catch(err => {\n        throw new Error(err);\n      });\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    return getFilteredTodos(todos, {\n      todosStatus,\n      query,\n    });\n  }, [todos, todosStatus, query]);\n\n  const onModalClose = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                status={todosStatus}\n                onStatusChange={setTodosStatus}\n                query={query}\n                onQueryChange={setQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0 ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  todoId={selectedTodo?.id || null}\n                  onSelectTodo={setSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onModalClose={onModalClose}\n        />\n      )}\n    </>\n  );\n};\n","import { SelectStatus } from '../enums/SelectStatus';\nimport { Todo } from '../types/Todo';\n\ntype FilterOptions = {\n  query: string;\n  todosStatus: SelectStatus;\n};\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  option: FilterOptions,\n) => {\n  const {\n    todosStatus,\n    query,\n  } = option;\n\n  let filteredTodos = [...todos];\n\n  if (todosStatus !== SelectStatus.All) {\n    filteredTodos = filteredTodos.filter(todo => {\n      switch (todosStatus) {\n        case SelectStatus.Active:\n          return !todo.completed;\n\n        case SelectStatus.Completed:\n          return todo.completed;\n\n        default:\n          return true;\n      }\n    });\n  }\n\n  if (query) {\n    filteredTodos = filteredTodos.filter(todo => {\n      const { title } = todo;\n      const lowerQuery = query.toLocaleLowerCase();\n\n      return title.toLowerCase().includes(lowerQuery);\n    });\n  }\n\n  return filteredTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}